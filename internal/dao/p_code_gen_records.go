// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/util/gconv"
	"xcoder/internal/dao/internal"
	"xcoder/internal/model/entity"
)

// internalPCodeGenRecordsDao is internal type for wrapping internal DAO implements.
type internalPCodeGenRecordsDao = *internal.PCodeGenRecordsDao

// pCodeGenRecordsDao is the data access object for table p_code_gen_records.
// You can define custom methods on it to extend its functionality as you wish.
type pCodeGenRecordsDao struct {
	internalPCodeGenRecordsDao
}

var (
	// PCodeGenRecords is globally public accessible object for table p_code_gen_records operations.
	PCodeGenRecords = pCodeGenRecordsDao{
		internal.NewPCodeGenRecordsDao(),
	}
)

func (dao *pCodeGenRecordsDao) Create(ctx context.Context, data *entity.PCodeGenRecords) error {
	_, err := g.Model(PCodeGenRecords.Table()).Data(data).Insert()
	if err != nil {
		return err
	}
	return nil
}

func (dao *pCodeGenRecordsDao) GetOneByGenerateUuid(ctx context.Context, generateUuid string) (
	result *entity.PCodeGenRecords, err error) {
	data, err := g.Model(PCodeGenRecords.Table()).Where(map[string]interface{}{
		"isactive": 1, "generate_uuid": generateUuid,
	}).One()
	if err != nil {
		return nil, err
	}

	err = gconv.Struct(data, &result)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func (dao *pCodeGenRecordsDao) UpdateByGenerateUuid(ctx context.Context, generateUuid string, updated map[string]interface{}) error {
	_, err := g.Model(PCodeGenRecords.Table()).Where(map[string]interface{}{
		"isactive": 1, "generate_uuid": generateUuid,
	}).Data(updated).Update()
	if err != nil {
		return err
	}

	return nil
}
